{
  description = "Luc's nix configuration";

  inputs = {
    nixpkgs.url = github:nixos/nixpkgs/nixos-unstable;
    unstable.follows = "nixpkgs";


    nixpkgs-wayland  = { url = "github:nix-community/nixpkgs-wayland"; };

    # # home-majnager pins nixpkgs to a specific version in its flake.
    # # we want to make sure everything pins to the same version of nixpkgs to be more efficient
    home-manager = {
        url = github:nix-community/home-manager;
        inputs.nixpkgs.follows = "nixpkgs";
      };

    # # agenix allows me to store encrypted secrets in the repo just like git-crypt, except
    # # it integrates with nix so I don't need to have world-readable secrets in the nix store.
    # agenix = {
    #   url = "github:ryantm/agenix";
    #   inputs.nixpkgs.follows = "nixpkgs";
    # };

    # # TODO: separate each config into its own flake to avoid pulling unnecessary deps? or is nix smart enough
      nixos-wsl = {
        url = "github:nix-community/NixOS-WSL";
        inputs.nixpkgs.follows = "nixpkgs";
      };

      emacs-overlay = {
        url = "github:nix-community/emacs-overlay";
        inputs.nixpkgs.follows = "nixpkgs";
        #inputs.flake-utils.follows = "utils";
    };

  };

  outputs = inputs@{self, nixpkgs, emacs-overlay, home-manager,  ...}:
  let
    user = "luc";
    system = "x86_64-linux";
    
#    pkgs = import nixpkgs {
#      config.allowUnfree = true;
#      overlays = [
#       (import ./custom-packages.nix)
#        emacs-overlay.overlay
#      ];
#    };
  
  in {
    inputs.nixpkgs.overlays = [
     # import ./overlays/default.nix
     emacs-overlay.overlay
    ]; 
    nixosConfigurations = { 

      miBook = inputs.nixpkgs.lib.nixosSystem { 
        system = "x86_64-linux";
          modules = [

          home-manager.nixosModules.home-manager {
            home-manager.useGlobalPkgs = true; # instead of having its own private nixpkgs
            home-manager.useUserPackages = true; # install to /etc/profiles instead of ~/.nix-profile
            home-manager.extraSpecialArgs = {
              inherit user; # pass user to modules in conf (home.nix or whatever)
              configName = "miBook";
            };
           }
            # Hardware configuration
            ./hosts/miBook/host.nix

            # Device is a personal laptop
         #  ./config/laptop.nix
            ./config/base-desktop.nix
            ./config/personal.nix
            ./config/cli.nix
            ./config/gui.nix
            
            # Give access to network filestore
         #  ./config/file_access.nix
          
          # # Use X11 Gnome
            ./config/xorg.nix
            ./config/oled_gnome.nix

          # Use Wayland Wayfire{
  description = "Luc's nix configuration";

  inputs = {
    nixpkgs.url = github:nixos/nixpkgs/nixos-unstable;
    unstable.follows = "nixpkgs";


    nixpkgs-wayland  = { url = "github:nix-community/nixpkgs-wayland"; };

    # # home-majnager pins nixpkgs to a specific version in its flake.
    # # we want to make sure everything pins to the same version of nixpkgs to be more efficient
    home-manager = {
        url = github:nix-community/home-manager;
        inputs.nixpkgs.follows = "nixpkgs";
      };

    # # agenix allows me to store encrypted secrets in the repo just like git-crypt, except
    # # it integrates with nix so I don't need to have world-readable secrets in the nix store.
    # agenix = {
    #   url = "github:ryantm/agenix";
    #   inputs.nixpkgs.follows = "nixpkgs";
    # };

    # # TODO: separate each config into its own flake to avoid pulling unnecessary deps? or is nix smart enough
      nixos-wsl = {
        url = "github:nix-community/NixOS-WSL";
        inputs.nixpkgs.follows = "nixpkgs";
      };

      emacs-overlay = {
        url = "github:nix-community/emacs-overlay";
        inputs.nixpkgs.follows = "nixpkgs";
        #inputs.flake-utils.follows = "utils";
    };

  };

  outputs = inputs@{self, nixpkgs, emacs-overlay, home-manager,  ...}:
  let
    user = "luc";
    system = "x86_64-linux";
    
#    pkgs = import nixpkgs {
#      config.allowUnfree = true;
#      overlays = [
#       (import ./custom-packages.nix)
#        emacs-overlay.overlay
#      ];
#    };
  
  in {
    inputs.nixpkgs.overlays = [
     # import ./overlays/default.nix
     emacs-overlay.overlay
    ]; 
    nixosConfigurations = { 

      miBook = inputs.nixpkgs.lib.nixosSystem { 
        system = "x86_64-linux";
          modules = [

          home-manager.nixosModules.home-manager {
            home-manager.useGlobalPkgs = true; # instead of having its own private nixpkgs
            home-manager.useUserPackages = true; # install to /etc/profiles instead of ~/.nix-profile
            home-manager.extraSpecialArgs = {
              inherit user; # pass user to modules in conf (home.nix or whatever)
              configName = "miBook";
            };
           }
            # Hardware configuration
            ./hosts/miBook/host.nix

            # Device is a personal laptop
         #  ./config/laptop.nix
            ./config/base-desktop.nix
            ./config/personal.nix
            ./config/cli.nix
            ./config/gui.nix
            
            # Give access to network filestore
         #  ./config/file_access.nix
          
          # # Use X11 Gnome
            ./config/xorg.nix
            ./config/oled_gnome.nix

          # Use Wayland Wayfire
         #  ./module/wayfire.nix

            # Use pipewire
            ./module/audio.nix
          ];
          specialArgs = { inherit inputs; };
        };
      };
    };
}
{
  description = "Luc's nix configuration";

  inputs = {
    nixpkgs.url = github:nixos/nixpkgs/nixos-unstable;
    unstable.follows = "nixpkgs";


    nixpkgs-wayland  = { url = "github:nix-community/nixpkgs-wayland"; };

    # # home-majnager pins nixpkgs to a specific version in its flake.
    # # we want to make sure everything pins to the same version of nixpkgs to be more efficient
    home-manager = {
        url = github:nix-community/home-manager;
        inputs.nixpkgs.follows = "nixpkgs";
      };

    # # agenix allows me to store encrypted secrets in the repo just like git-crypt, except
    # # it integrates with nix so I don't need to have world-readable secrets in the nix store.
    # agenix = {
    #   url = "github:ryantm/agenix";
    #   inputs.nixpkgs.follows = "nixpkgs";
    # };

    # # TODO: separate each config into its own flake to avoid pulling unnecessary deps? or is nix smart enough
      nixos-wsl = {
        url = "github:nix-community/NixOS-WSL";
        inputs.nixpkgs.follows = "nixpkgs";
      };

      emacs-overlay = {
        url = "github:nix-community/emacs-overlay";
        inputs.nixpkgs.follows = "nixpkgs";
        #inputs.flake-utils.follows = "utils";
    };

  };

  outputs = inputs@{self, nixpkgs, emacs-overlay, home-manager,  ...}:
  let
    user = "luc";
    system = "x86_64-linux";
    
#    pkgs = import nixpkgs {
#      config.allowUnfree = true;
#      overlays = [
#       (import ./custom-packages.nix)
#        emacs-overlay.overlay
#      ];
#    };
  
  in {
    inputs.nixpkgs.overlays = [
     # import ./overlays/default.nix
     emacs-overlay.overlay
    ]; 
    nixosConfigurations = { 

      miBook = inputs.nixpkgs.lib.nixosSystem { 
        system = "x86_64-linux";
          modules = [

          home-manager.nixosModules.home-manager {
            home-manager.useGlobalPkgs = true; # instead of having its own private nixpkgs
            home-manager.useUserPackages = true; # install to /etc/profiles instead of ~/.nix-profile
            home-manager.extraSpecialArgs = {
              inherit user; # pass user to modules in conf (home.nix or whatever)
              configName = "miBook";
            };
           }
            # Hardware configuration
            ./hosts/miBook/host.nix

            # Device is a personal laptop
         #  ./config/laptop.nix
            ./config/base-desktop.nix
            ./config/personal.nix
            ./config/cli.nix
            ./config/gui.nix
            
            # Give access to network filestore
         #  ./config/file_access.nix
          
          # # Use X11 Gnome
            ./config/xorg.nix
            ./config/oled_gnome.nix

          # Use Wayland Wayfire
         #  ./module/wayfire.nix

            # Use pipewire
            ./module/audio.nix
          ];
          specialArgs = { inherit inputs; };
        };
      };
    };
}

         #  ./module/wayfire.nix

            # Use pipewire
            ./module/audio.nix
          ];
          specialArgs = { inherit inputs; };
        };
      };
    };
}
